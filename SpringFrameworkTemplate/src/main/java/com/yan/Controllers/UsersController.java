package com.yan.Controllers;


import org.apache.catalina.User;
import org.springframework.boot.web.servlet.error.ErrorController;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;
import com.yan.Model.Users;
import com.yan.repository.UsersRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.view.RedirectView;

import javax.persistence.Convert;
import java.util.Optional;

import java.util.List;

import static java.util.stream.Collectors.toList;
//@PreAuthorize("hasAnyRole('ADMIN')")
@RequestMapping("/Users")
@Controller
//public class UsersController implements ErrorController {
public class UsersController{
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UsersRepository userRepository;

//    @RequestMapping("/index")
//    public String index() {
//        return "users/index";
//    }
    /*-----------------------------------------Index--------------------------------------------------------*/

    @RequestMapping(value = "/index", method = RequestMethod.GET)
    public ModelAndView index() {
        List<Users> usersList = userRepository.findAll();
        //System.out.println("El nombre de usuario es: " + usersList.get(1).getName());
        //usersList.forEach(item -> System.out.println(item.getName()));

        ModelAndView model = new ModelAndView("users/index");
        model.addObject("usersList", usersList);

        return model;
    }

//    @Override
//    public String getErrorPath() {
//        return "users/index";
//    }

//    @RequestMapping("/index")
//    public String index() {
////        IntStream.iterate(0, i -> i + 1)
////                .limit(10)
////                .forEach(System.out::println);
////        List<Users> names
////                =Users.stream().map(Users::getName).collect(Collectors.toList());
////        try {
////            List<Users> usersList = usersRepository.findAll();
////            usersList.forEach(System.out::println);
////        }catch (Exception e){
////            System.out.println("error!!");
////        }
//
//        //usersList.forEach(System.out::println);
////        List<Users> oldHares = hare.stream()
////                .collect(toList());
//        List<Users> usersList = userRepository.findAll();
//        usersList.forEach(item -> System.out.println(item.getName()));
//
//        return "Hello!";
//    }

//    private void listEmployees(){
//        System.out.println("Employees list :");
//
//        // Nuevamente, manager es el EntityManager obtenido anteriormente.
//        List<Users> resultList = manager.createQuery(
//                "Select a From Employee a", Users.class).getResultList();
//        System.out.println("num of employess:" + resultList.size());
//        for (Users next : resultList) {
//            System.out.println("next employee: " + next);
//        }
//    }


    /*-----------------------------------------Edit--------------------------------------------------------*/

    @RequestMapping(value = "/edit/{id}", method = RequestMethod.GET)
    public ModelAndView Edit(@PathVariable("id") int id) {
        //Users users = userRepository.findOne(ID id);

        //T findOne(ID primaryKey);
        java.util.Optional<Users> data = userRepository.findById(id);
        Users user = data.get();
        //System.out.println(data.getName());
        ModelAndView model = new ModelAndView("users/edit");
        model.addObject("user", user);

        return model;
    }

    @RequestMapping(value = "/edit", method = RequestMethod.POST)
    public RedirectView Edit(@ModelAttribute("user")Users user, BindingResult result){

        if (result.hasErrors()) {
            return new RedirectView("/Users/edit");
        }
        userRepository.save(user);
         return new RedirectView("/Users/index");

    }

    /*-----------------------------------------Create--------------------------------------------------------*/

    @RequestMapping(value = "/create", method = RequestMethod.GET)
    public ModelAndView Create() {

        Users user = new Users();

        ModelAndView model = new ModelAndView("users/create");
        model.addObject("user", user);


        return model;
    }

    @RequestMapping(value = "/create", method = RequestMethod.POST)
    public RedirectView Create (@ModelAttribute("user")Users user, BindingResult result){

        System.out.println("entre al post");
        if (result.hasErrors()) {
            return new RedirectView("/Users/create");
        }
        userRepository.save(user);
        return new RedirectView("/Users/index");

    }


    /*-----------------------------------------Details--------------------------------------------------------*/

    @RequestMapping(value = "/details/{id}", method = RequestMethod.GET)
    public ModelAndView Details(@PathVariable("id") int id) {

        java.util.Optional<Users> data = userRepository.findById(id);
        Users user = data.get();

        ModelAndView model = new ModelAndView("users/details");
        model.addObject("user", user);

        return model;
    }

    @RequestMapping(value = "/details", method = RequestMethod.POST)
    public RedirectView Details(@ModelAttribute("user")Users user, BindingResult result){

        if (result.hasErrors()) {
            return new RedirectView("/Users/edit");
        }
        userRepository.save(user);
        return new RedirectView("/Users/index");

    }

    /*-----------------------------------------Delete--------------------------------------------------------*/

    @RequestMapping(value = "/delete/{id}", method = RequestMethod.GET)
    public ModelAndView Delete(@PathVariable("id") int id) {

        java.util.Optional<Users> data = userRepository.findById(id);
        Users user = data.get();

        ModelAndView model = new ModelAndView("users/delete");
        model.addObject("user", user);

        return model;
    }

    @RequestMapping(value = "/delete", method = RequestMethod.POST)
    public RedirectView Delete(@ModelAttribute("user")Users user, BindingResult result){

        //String stringNumber = Integer.toString(user.getId());
        System.out.println("entre a post delete");
        if (result.hasErrors()) {
            return new RedirectView("/Users/index");
        }
        //userRepository.delete(Integer.toString(user.getId()));
        userRepository.delete(user);
        return new RedirectView("/Users/index");

    }


    @PreAuthorize("hasAnyRole('ADMIN')")
    @GetMapping("/secured/all")
    public String securedHello() {
        return "Secured Hello";
    }

    @GetMapping("/secured/alternate")
    public String alternate() {
        return "alternate";
    }
}



